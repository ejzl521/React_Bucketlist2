{"version":3,"sources":["BucketList.js","Progress.js","Spinner.js","firebase.js","redux/modules/bucket.js","Detail.js","PageNotFound.js","App.js","reportWebVitals.js","redux/configStore.js","index.js"],"names":["ListStyle","styled","div","ItemStyle","props","color","font_color","BucketList","my_lists","useSelector","state","bucket","list","map","index","completed","onClick","history","push","text","ProgressBar","Highlight","width","Dot","Progress","bucket_list","filter","item","length","Outter","Spinner","AccessTime","style","fontSize","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","initialState","loaded","type","bucket_db","collection","Detail","dispatch","useDispatch","bucket_index","parseInt","match","params","Button","getState","bucket_data","id","doc","delete","then","res","deleteBucket","catch","err","console","log","goBack","variant","update","updateBucket","PageNotFound","Input","Container","Title","h1","Line","hr","withRouter","React","useRef","useEffect","get","docs","forEach","exists","data","className","exact","path","render","component","ref","new_item","current","value","add","docRef","createBucket","window","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","thunk","enhancer","applyMiddleware","rootReducer","createBrowserHistory","combineReducers","action","new_bucket_list","update_bucket_list","deleted_bucket_list","store","createStore","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.761e1e54.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nconst BucketList = (props) => {\r\n  \r\n  const my_lists = useSelector(state => state.bucket.list);\r\n  return (\r\n    <ListStyle>\r\n      {my_lists.map((list, index) => {\r\n        return (\r\n          <ItemStyle\r\n            key={index}\r\n            // styled-component에 props로 색을 넘겨줌\r\n            // 버킷리스트가 completed 되었다면 slateblue 아니면 aliceblue\r\n            color={list.completed? \"slateblue\": \"aliceblue\"}\r\n            // 버킷리스트가 completd 되었다면 글씨 색깔이 흰색!\r\n            font_color={list.completed? \"#fff\": \"black\"}\r\n            onClick={() => {\r\n              // 배열의 몇번째 항목을 선택했는 지, url 파라미터로 넘겨줌!\r\n              props.history.push(\"/detail/\" + index);\r\n            }}>\r\n            {list.text}\r\n          </ItemStyle>\r\n        );\r\n      })}\r\n    </ListStyle>\r\n  );\r\n};\r\n\r\nconst ListStyle = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 50vh;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst ItemStyle = styled.div`\r\n  padding: 16px;\r\n  margin: 8px;\r\n  background-color: ${props => props.color};\r\n  color: ${props => props.font_color};\r\n  font-weight: bold;\r\n`;\r\n\r\nexport default BucketList;","//progress bar\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Progress = (props) => {\r\n    const bucket_list = useSelector(state => state.bucket.list);\r\n    //완료된 버킷리스트 갯수 세기\r\n    let completed = bucket_list.filter(item => item.completed === true).length;\r\n\r\n    return (\r\n        <ProgressBar>\r\n            {/*전체 버킷리스트에서 몇퍼센트 완료했는지 props로 넘겨줘서 하이라이트 처리*/}\r\n            <Highlight width={(completed/bucket_list.length)*100 + \"%\"}/>\r\n            <Dot/>\r\n        </ProgressBar>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ProgressBar = styled.div`\r\n    background: #eee;\r\n    width: 100%;\r\n    height: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px\r\n`;\r\n\r\n// transition을 사용해서 progressbar가 부드럽게 차오르게 함.\r\nconst Highlight = styled.div`\r\n    background: blue;\r\n    height: 100%;\r\n    width: ${props => props.width};\r\n    transition: width 1s;\r\n    border-radius: 10px;\r\n`;\r\n\r\n// 프로그레스 바에 동그라미 달아서 프로그레스 바가 차오를때 같이 움직이게 함\r\nconst Dot = styled.div`\r\n    background: #fff;\r\n    border: 5px solid blue;\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 15px;\r\n    box-sizing: border-box;\r\n    margin-left: -10px;\r\n`\r\n\r\nexport default Progress","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {AccessTime} from \"@material-ui/icons\";\r\n\r\nconst Spinner = (props) => {\r\n\r\n    return (\r\n      <Outter>\r\n        <AccessTime style={{ color: \"yellow\", fontSize: \"300px\" }} />\r\n      </Outter>\r\n    );\r\n}\r\n\r\nconst Outter = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #ede2ff;\r\n`;\r\n\r\nexport default Spinner;","//firebase.js\r\nimport firebase from \"firebase/compat/app\"\r\nimport 'firebase/compat/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyC6hC9Rpa0ZuONMHhjK89iKWouRDj7SXOA\",\r\n    authDomain: \"bucketlist-9f03f.firebaseapp.com\",\r\n    projectId: \"bucketlist-9f03f\",\r\n    storageBucket: \"bucketlist-9f03f.appspot.com\",\r\n    messagingSenderId: \"997397908951\",\r\n    appId: \"1:997397908951:web:4faf41010604286bfacf92\",\r\n    measurementId: \"G-0H7W5H3VFH\"\r\n};\r\n\r\n// firebaseConfig 정보로 firebase 시작\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// firebase의 firestore 인스턴스를 변수에 저장\r\nconst firestore = firebase.firestore();\r\n\r\n// 필요한 곳에서 사용할 수 있도록 내보내기\r\n// 다른 곳에서 불러올때 firestore로 불러와야 함!!\r\nexport { firestore };","import { firestore } from \"../../firebase\";\r\n\r\n// Action\r\nconst LOAD = 'bucket/LOAD';\r\nconst CREATE = 'bucket/CREATE';\r\nconst DELETE = 'bucket/DELETE';\r\nconst UPDATE = 'bucket/UPDATE';\r\nconst LOADED = 'bucket/LOADED';\r\n// initialState \r\nconst initialState = {\r\n  loaded: false,\r\n  list: [\r\n    /*\r\n    { text: \"치킨 먹기\", completed: false },\r\n    { text: \"컴퓨터 게임하기\", completed: false },\r\n    { text: \"여행가기\", completed: false }\r\n    */\r\n  ]\r\n};\r\n\r\n// Action Creators\r\nexport const loadBucket = (bucket) => {\r\n  // 불러오는 기능은 어떤 데이터를 줄 필요가 없지만 아래와 모양새를 맞추기 위해 추가.\r\n  return { type: LOAD, bucket };\r\n}\r\n\r\nexport const createBucket = (bucket) => {\r\n  // 타입뿐만 아니라 데이터도 필요하다. \r\n  //CreateBucket 같은 경우에는 추가할 값이 필요하다.\r\n  return { type: CREATE, bucket };\r\n}\r\n\r\nexport const updateBucket = (index) => {\r\n  return { type: UPDATE, index };\r\n}\r\n\r\nexport const deleteBucket = (index) => {\r\n  // 타입뿐만 아니라 데이터도 필요하다. \r\n  return { type: DELETE, index };\r\n}\r\n\r\nexport const loaded = (loaded) => {\r\n  return { type: LOADED, loaded }\r\n}\r\n\r\n// Firestore에서 collection을 가져옴\r\nconst bucket_db = firestore.collection(\"bucket\");\r\n\r\n// Firebase와 통신하는 함수. 함수를 반환한다.\r\n// Firebase에서 데이터를 가져오는 부분 (LOAD)\r\nexport const loadBucketFB = () => {\r\n  // 함수를 반환하는 미들웨어 부분\r\n  return function (dispatch) {\r\n\r\n    dispatch(loaded(false))\r\n    bucket_db.get().then((docs) => {\r\n\r\n      // Firestore에서 가져온 데이터를 저장할 변수\r\n      let bucket_data = [];\r\n      // \"bucket\" 콜렉션의 모든 문서에서 데이터와 id를 가져옴!\r\n      docs.forEach((doc) => {\r\n        if (doc.exists) {\r\n          bucket_data = [...bucket_data, { id: doc.id, ...doc.data() }]\r\n        }\r\n      })\r\n      // firestore에서 가져온 데이터를 action에 넣어서 dispatch 해준다!\r\n      // 리덕스 모듈에서 action을 dispatch 해주므로 컴포넌트에서는 firestore와\r\n      // 통신하는 함수를 불러주면 된다!\r\n      dispatch(loadBucket(bucket_data))\r\n      dispatch(loaded(true));\r\n    });\r\n  }\r\n}\r\n\r\n// Firebase에 데이터를 추가하는 부분 (CREATE)\r\nexport const createBucketFB = (bucket) => {\r\n  return function (dispatch) {\r\n    dispatch(loaded(false));\r\n    let bucket_data = { text: bucket, completed: false };\r\n    bucket_db\r\n      .add(bucket_data)\r\n      .then((docRef) => {\r\n        // id와 data를 추가한다!\r\n        bucket_data = { id: docRef.id, ...bucket_data };\r\n        // firestore에 데이터 추가를 성공했을 때는? 액션 디스패치!\r\n        dispatch(createBucket(bucket_data));\r\n        dispatch(loaded(true));\r\n      })\r\n      .catch((err) => {\r\n        // 여긴 에러가 났을 때 들어오는 구간입니다!\r\n        console.log(err);\r\n        window.alert('오류가 났네요! 나중에 다시 시도해주세요!');\r\n        dispatch(loaded(true));\r\n      });\r\n  };\r\n}\r\n\r\n// Firebase 데이터 수정하는 부분 (UPADTE)\r\n// 파라미터 bucket을 인덱스로 사용\r\nexport const updateBucketFB = (index) => {\r\n  return function (dispatch, getState) {\r\n\r\n    // state에 있는 값을 가져옵니다!\r\n    // 아래에서 getState()뒤 bucket은 스토어에서 불러온 리덕스 모듈 이름\r\n    let bucket_data = getState().bucket.list[index];\r\n\r\n    // id가 없으면? 바로 끝내버립시다.\r\n    if (!bucket_data.id) {\r\n      return;\r\n    }\r\n\r\n    bucket_db\r\n      .doc(bucket_data.id)\r\n      .update({ completed: true }) // index에 해당하는 firestore 문서의 text 변경\r\n      .then((res) => {\r\n        dispatch(updateBucket(index));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\");\r\n      });\r\n  };\r\n};\r\n\r\n// Firestore에서 데이터를 삭제하는 부분 (DELETE)\r\nexport const deleteBucketFB = (index) => {\r\n  return function (dispatch, getState) {\r\n    const bucket_data = getState().bucket.list[index];\r\n    // id가 없으면? 바로 끝내버립시다.\r\n    if (!bucket_data.id) {\r\n      return;\r\n    }\r\n    // 삭제하기\r\n    bucket_db\r\n      .doc(bucket_data.id)\r\n      .delete()\r\n      .then((res) => {\r\n        dispatch(deleteBucket(index));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\");\r\n      });\r\n  };\r\n};\r\n\r\n// Reducer\r\nexport default function reducer(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    // do reducer stuff\r\n    case \"bucket/LOAD\":\r\n      // Firestore에 데이터가 있을때 리턴\r\n      if (action.bucket.length > 0) {\r\n        return { ...state, list: action.bucket };\r\n      }\r\n      // 없으면 initialState를 리턴해줌\r\n      return state;\r\n\r\n    case \"bucket/CREATE\":\r\n      const new_bucket_list = [...state.list, action.bucket];\r\n      return { ...state, list: new_bucket_list };\r\n\r\n    case \"bucket/UPDATE\":\r\n      const update_bucket_list = state.list.map((item, index) => {\r\n        if (index === action.index) {\r\n          return { ...item, completed: true };\r\n        }\r\n        return item;\r\n      })\r\n      return { ...state, list: update_bucket_list };\r\n\r\n    case \"bucket/DELETE\":\r\n      const deleted_bucket_list = state.list.filter((item, index) => index !== action.index);\r\n      return { ...state, list: deleted_bucket_list };\r\n      \r\n    case \"bucket/LOADED\":\r\n      return { ...state, loaded: action.loaded }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { deleteBucketFB, updateBucketFB } from \"./redux/modules/bucket\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst Detail = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    // url 파라미터에서 배열의 인덱스 가져오기\r\n    let bucket_index = parseInt(props.match.params.index);\r\n    const bucket_list = useSelector(state => state.bucket.list);\r\n\r\n    return (\r\n        <div>\r\n            <h1>{bucket_list[bucket_index].text}</h1>\r\n\r\n            <Button\r\n                onClick={() => {\r\n                    dispatch(deleteBucketFB(bucket_index));\r\n                    props.history.goBack();\r\n                }}\r\n                variant=\"outlined\"\r\n            >\r\n                삭제\r\n            </Button>\r\n            <Button\r\n                onClick={() => {\r\n                    dispatch(updateBucketFB(bucket_index));\r\n                    props.history.goBack();\r\n                }}\r\n                variant=\"outlined\"\r\n            >\r\n                완료\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Detail;","import React from \"react\";\r\n\r\nconst PageNotFound = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>주소가 올바르지 않아요!</h1>\r\n      <button onClick={props.history.goBack()}>뒤로가기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageNotFound;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport BucketList from './BucketList';\r\nimport Progress from './Progress';\r\nimport Spinner from './Spinner';\r\nimport Detail from \"./Detail\";\r\nimport PageNotFound from './PageNotFound';\r\nimport { withRouter } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createBucketFB, loadBucketFB } from './redux/modules/bucket';\r\nimport { Switch } from 'react-router';\r\nimport './App.css';\r\n\r\n\r\nconst App = (props) => {\r\n\r\n  const text = React.useRef();\r\n  const loaded = useSelector(state => state.bucket.loaded);\r\n\r\n  // Firestore에서 데이터 불러오기\r\n  const dispatch = useDispatch();\r\n  React.useEffect(() => {\r\n    dispatch(loadBucketFB())\r\n  }, [])\r\n\r\n  const addBucketList = () => {\r\n    const new_item = text.current.value;\r\n    dispatch(createBucketFB(new_item));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container>\r\n        <Title>내 버킷리스트</Title>\r\n        <Progress />\r\n        <Line />\r\n        {loaded ? (       \r\n          <Switch>\r\n            {/*props가 있는 라우터는 history 객체를 props로 다시 받아줘야 함!!*/}\r\n            <Route exact path=\"/\" render={(props) => (<BucketList history={props.history} />)} />\r\n            <Route path=\"/detail/:index\" component={Detail} />\r\n            <Route component={PageNotFound} />\r\n          </Switch>\r\n        ) : (\r\n          <Spinner />\r\n        )}\r\n      </Container>\r\n      <Input>\r\n        <input type=\"text\" ref={text} />\r\n        <button onClick={addBucketList}>추가하기</button>\r\n      </Input>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Input = styled.div`\r\n  max-width: 350px;\r\n  min-height: 10vh;\r\n  background-color: #fff;\r\n  padding: 16px;\r\n  margin: 20px auto;\r\n  border-radius: 10px;\r\n  border: 1px solid #ddd;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  & * {\r\n    padding: 5px;\r\n  }\r\n\r\n  & input{\r\n    margin-right: 5px;\r\n    &:focus{\r\n      border: 3px solid slateblue;\r\n    }\r\n  }\r\n\r\n  & button {\r\n    width: 25%;\r\n    color: #fff;\r\n    background-color: slateblue;\r\n    border-radius: 10px;\r\n    border: 0;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  max-width: 350px;\r\n  min-height: 60vh;\r\n  background-color: #fff;\r\n  padding: 16px;\r\n  margin: 20px auto;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  color: slateblue;\r\n  text-align: center;\r\n`;\r\n\r\nconst Line = styled.hr`\r\n  margin: 16px 0px;\r\n  border: 1px dotted #ddd;\r\n`;\r\n\r\nexport default withRouter(App);","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\n// 우리가 만든 리덕스 모듈의 리듀서\r\nimport bucket from './modules/bucket';\r\nimport { createBrowserHistory } from \"history\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n// 미들웨어\r\nconst middlewares = [thunk];\r\nconst enhancer = applyMiddleware( ...middlewares );\r\n// 브라우저 히스토리를 만들어줍니다.\r\nexport const history = createBrowserHistory();\r\n// root 리듀서를 만들어줍니다.\r\n// 나중에 리듀서를 여러개 만들게 되면 여기에 하나씩 추가해주는 거예요!\r\nconst rootReducer = combineReducers({ bucket });\r\n\r\n// 스토어를 만듭니다.\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\n// 프로젝트에 리덕스를 주입해줄 프로바이더를 불러옴\r\nimport { Provider } from \"react-redux\";\r\n// 연결할 스토어\r\nimport store from \"./redux/configStore\";\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}